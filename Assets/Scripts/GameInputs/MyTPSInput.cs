//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MyTPSInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MyTPS
{
    public partial class @MyTPSInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MyTPSInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyTPSInput"",
    ""maps"": [
        {
            ""name"": ""HumanAction"",
            ""id"": ""48ca622b-7b02-4418-83a3-8aea081749fd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""181c7268-e61d-4f6e-88e1-7eb058ae82e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""53aec0e6-baee-4322-9681-9bafc56cf19c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""3693dbd4-c589-4f4a-a939-591edca7ef39"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Button"",
                    ""id"": ""8bcd4303-f586-47a5-a71a-e1f12ae3fad6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walking"",
                    ""type"": ""Button"",
                    ""id"": ""7d2c2e3d-12ca-4db3-9433-b07c39b1b9fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""73dfbd7d-5dba-448d-8c8f-cb24b2c356fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1aeb22ee-3869-4097-a866-ae7e867e39ec"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a29bbae6-dea3-459d-9390-863476cf4100"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""176364e0-bfbd-4be7-ba44-b1e6f2bd76ab"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a0445cf6-c844-48a3-ae1c-62413523cade"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d3b32c14-81d7-4ff5-a69b-c6f6f6679b75"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9229d7ec-396b-4536-8ae7-9e4f994f4000"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e00317f6-725d-45bc-b184-fe94c75530da"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8a00f54f-4e03-48ba-8c54-3cd03f6eaa7b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""56decad5-1e04-4e5e-bb13-65d577d59e95"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7f2a6c0f-acb4-4caa-a14e-3889249ffb70"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""83e4f525-496a-4ac0-8645-b83806793e66"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17e0aee7-1ec1-4aa6-a42e-c8a63ca367fb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // HumanAction
            m_HumanAction = asset.FindActionMap("HumanAction", throwIfNotFound: true);
            m_HumanAction_Movement = m_HumanAction.FindAction("Movement", throwIfNotFound: true);
            m_HumanAction_Jump = m_HumanAction.FindAction("Jump", throwIfNotFound: true);
            m_HumanAction_Look = m_HumanAction.FindAction("Look", throwIfNotFound: true);
            m_HumanAction_CameraZoom = m_HumanAction.FindAction("CameraZoom", throwIfNotFound: true);
            m_HumanAction_Walking = m_HumanAction.FindAction("Walking", throwIfNotFound: true);
            m_HumanAction_Aim = m_HumanAction.FindAction("Aim", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // HumanAction
        private readonly InputActionMap m_HumanAction;
        private List<IHumanActionActions> m_HumanActionActionsCallbackInterfaces = new List<IHumanActionActions>();
        private readonly InputAction m_HumanAction_Movement;
        private readonly InputAction m_HumanAction_Jump;
        private readonly InputAction m_HumanAction_Look;
        private readonly InputAction m_HumanAction_CameraZoom;
        private readonly InputAction m_HumanAction_Walking;
        private readonly InputAction m_HumanAction_Aim;
        public struct HumanActionActions
        {
            private @MyTPSInput m_Wrapper;
            public HumanActionActions(@MyTPSInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_HumanAction_Movement;
            public InputAction @Jump => m_Wrapper.m_HumanAction_Jump;
            public InputAction @Look => m_Wrapper.m_HumanAction_Look;
            public InputAction @CameraZoom => m_Wrapper.m_HumanAction_CameraZoom;
            public InputAction @Walking => m_Wrapper.m_HumanAction_Walking;
            public InputAction @Aim => m_Wrapper.m_HumanAction_Aim;
            public InputActionMap Get() { return m_Wrapper.m_HumanAction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HumanActionActions set) { return set.Get(); }
            public void AddCallbacks(IHumanActionActions instance)
            {
                if (instance == null || m_Wrapper.m_HumanActionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HumanActionActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @CameraZoom.started += instance.OnCameraZoom;
                @CameraZoom.performed += instance.OnCameraZoom;
                @CameraZoom.canceled += instance.OnCameraZoom;
                @Walking.started += instance.OnWalking;
                @Walking.performed += instance.OnWalking;
                @Walking.canceled += instance.OnWalking;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }

            private void UnregisterCallbacks(IHumanActionActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @CameraZoom.started -= instance.OnCameraZoom;
                @CameraZoom.performed -= instance.OnCameraZoom;
                @CameraZoom.canceled -= instance.OnCameraZoom;
                @Walking.started -= instance.OnWalking;
                @Walking.performed -= instance.OnWalking;
                @Walking.canceled -= instance.OnWalking;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
            }

            public void RemoveCallbacks(IHumanActionActions instance)
            {
                if (m_Wrapper.m_HumanActionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IHumanActionActions instance)
            {
                foreach (var item in m_Wrapper.m_HumanActionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HumanActionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public HumanActionActions @HumanAction => new HumanActionActions(this);
        public interface IHumanActionActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnCameraZoom(InputAction.CallbackContext context);
            void OnWalking(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
    }
}
